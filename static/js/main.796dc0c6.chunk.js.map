{"version":3,"sources":["../../dist/spid-idp-arubaid~biXjMUPd.svg","../../dist/spid-idp-infocertid~bmqXPBOx.svg","../../dist/spid-idp-posteid~PIAVTNQX.svg","../../dist/spid-idp-sielteid~gPbEKUHE.svg","../../dist/spid-idp-timid~FIiWQnSz.svg","../../dist/spid-idp-namirialid~PDxLtsax.svg","../../dist/spid-idp-spiditalia~GdXfNloS.svg","../../dist/spid-idp-intesaid~xcxRNxJf.svg","../../dist/spid-idp-lepidaid~YGVaJzCf.svg","../../dist/spid-logo-animation-black~ZYbHBrkh.svg","../../dist/spid-logo~zJjEzXFQ.svg","../../dist/close~hKFpNpUn.svg","../../src/shared/providers.tsx","../../src/shared/utils.ts","../../src/shared/i18n.ts","../../src/modalVariant/constants.tsx","../../src/modalVariant/utils.tsx","../../src/modalVariant/ProviderButton.tsx","../../src/modalVariant/ProvidersModal.tsx","../../src/modalVariant/index.tsx","../../src/dropdownVariant/constants.ts","../../src/dropdownVariant/util.tsx","../../src/dropdownVariant/ProvidersMenu.tsx","../../src/dropdownVariant/index.tsx","../../src/component.tsx","Header.tsx","constants.ts","BISelect.tsx","Configurator.tsx","EventsTable.tsx","Codesandbox.tsx","CodeRenderer.tsx","DocTable.tsx","App.tsx","index.tsx","../../dist/spid-ico-circle-lb~LegQefra.svg","../../dist/spid-ico-circle-bb~bpKzRdOW.svg"],"names":["module","exports","providers","protocols","entityName","logo","entityID","active","mergeProviders","extraProviders","length","idp","validateURL","url","Error","isGetMethod","configuration","providersCopy","JSON","getShuffledProviders","Math","isProviderActive","supported","protocol","isExtraProviders","translations","it","naviga_indietro","alt_logo_SPID","scegli_provider_SPID","annulla_accesso","non_hai_SPID","cosa_SPID","entra_con_SPID","scopri_di_piu","accedi_con_idp","idp_disabled","maggiori_info","en","de","currentLang","getTranslationFn","language","text","placeholderValue","possibleStates","INIT","type","ENTERING","ENTERED","EXITING","EXITED","sizeMapping","sm","md","l","emptyClasses","isVisible","modalState","getDefinedClasses","klasses","styles","ProviderButtonContent","React","src","alt","style","maxWidth","ProviderButton","i18n","isActive","delay","visibility","onProviderClicked","actionURL","encodeURIComponent","linkTitle","classNames","animationDelay","loginURL","className","id","title","href","disabled","onClick","role","fieldName","extraFields","action","method","e","name","value","Object","inputName","inputValue","key","ButtonImage","altText","float","ProvidersModal","mapping","closeModal","panel","buttonLogo","buttonClose","buttonManIcon","getModalClasses","panelClasses","buttonCloseClasses","buttonLogoClasses","buttonManIconClasses","hidden","tabIndex","SpidLogoUrl","CloseSvgUrl","SpidLogoAnimationBlackUrl","i","target","providersList","LoginButton","theme","corners","fluid","size","toggleModal","modalVisibility","customStylingClasses","computeButtonClasses","console","computeButtonTransitionClasses","wrapper","icon","wrapperTransitionClasses","iconButtonClasses","buttonImageUrl","SPIDReactButton","lang","onProvidersShown","onProvidersHidden","useState","state","setState","useEffect","escHandler","event","document","timer","setTimeout","clearTimeout","translateFn","moreLoginProps","moreModalProps","mergedProviders","open","xl","getButtonSizeClass","getIdpButtonSizeClass","currentSize","ProvidersDropdown","idpButtonMenu","supportLink","srOnly","shuffledProviders","openDropdown","toggleDropdown","container","buttonIcon","buttonText","props","AppHeader","iconName","tag","aria-label","color","padding","defaultURL","languages","configurations","sizes","colorThemes","cornerTypes","types","initState","slice","map","Option","DropdownIndicator","aria-hidden","generatedIds","idGenerator","label","SelectComponent","options","onChange","selectedValue","htmlFor","components","IndicatorSeparator","provided","height","valueContainer","control","placeholder","classNamePrefix","getOptionsAndCurrentSelection","labels","currentState","prop","outputOptions","currentSelection","find","selection","Configurator","buttonProps","updateProp","setValidURL","isValidURL","langOptions","langSelection","sizeOptions","sizeSelection","colorSchemeOptions","colorThemeSelection","protocolOptions","protocolSelection","cornerTypeOptions","cornerTypeSelection","methodOptions","methodSelection","typeOptions","typeSelection","validProps","valid","invalid","Col","infoText","newURL","indexOf","FormGroup","selectedOption","includes","check","checked","Row","isChecked","filter","Label","EventsTable","events","scope","arg","generateURLParams","code","getParameters","files","content","CodeSandboxLink","SyntaxHighlighter","registerLanguage","jsx","CodeRenderer","entries","Array","isArray","every","v","isDefaultProp","stringify","join","showLineNumbers","wrapLines","vs","payload","DocTable","doc","setDoc","ms","Promise","all","fetch","process","then","response","r","markdown","catch","stroke","strokeOpacity","App","setProps","setEvents","updateStateProp","useCallback","newValue","prevState","prependEvent","newEvent","Container","toUpperCase","preventDefault","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.796dc0c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spid-idp-arubaid~biXjMUPd.1f6e95c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-infocertid~bmqXPBOx.ec5b92ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-posteid~PIAVTNQX.f12f868d.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-sielteid~gPbEKUHE.092e2208.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-timid~FIiWQnSz.b7e584e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-namirialid~PDxLtsax.745325fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-spiditalia~GdXfNloS.e45c9e05.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-intesaid~xcxRNxJf.a4ea157f.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-lepidaid~YGVaJzCf.34e0a1b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-logo-animation-black~ZYbHBrkh.3fe355c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-logo~zJjEzXFQ.b5234f51.svg\";","module.exports = __webpack_public_path__ + \"static/media/close~hKFpNpUn.f2ec1f7d.svg\";","import ArubaSVGUrl from '/./svgs/idp-logos/spid-idp-arubaid.svg';\nimport InfocertSVGUrl from '/./svgs/idp-logos/spid-idp-infocertid.svg';\nimport PosteSVGUrl from '/./svgs/idp-logos/spid-idp-posteid.svg';\nimport SielteSVGUrl from '/./svgs/idp-logos/spid-idp-sielteid.svg';\nimport TimSVGUrl from '/./svgs/idp-logos/spid-idp-timid.svg';\nimport NamirialSVGUrl from '/./svgs/idp-logos/spid-idp-namirialid.svg';\nimport RegisterItSVGUrl from '/./svgs/idp-logos/spid-idp-spiditalia.svg';\nimport IntesaSVGUrl from '/./svgs/idp-logos/spid-idp-intesaid.svg';\nimport LepidaSVGUrl from '/./svgs/idp-logos/spid-idp-lepidaid.svg';\n\nimport type { RegisteredProviderRecord } from './types';\n\nexport const providers: Readonly<RegisteredProviderRecord>[] = [\n  {\n    protocols: ['SAML'],\n    entityName: 'Aruba ID',\n    logo: ArubaSVGUrl,\n    entityID: 'https://loginspid.aruba.it',\n    active: true\n  },\n  {\n    protocols: ['SAML'],\n    entityName: 'Infocert ',\n    logo: InfocertSVGUrl,\n    entityID: 'https://identity.infocert.it',\n    active: true\n  },\n  {\n    protocols: ['SAML'],\n    entityName: 'Poste ID',\n    logo: PosteSVGUrl,\n    entityID: 'https://posteid.poste.it',\n    active: true\n  },\n  {\n    protocols: ['SAML'],\n    entityName: 'Sielte',\n    logo: SielteSVGUrl,\n    entityID: 'https://identity.sieltecloud.it',\n    active: true\n  },\n  {\n    protocols: ['SAML'],\n    entityName: 'Tim ID',\n    logo: TimSVGUrl,\n    entityID: 'https://login.id.tim.it/affwebservices/public/saml2sso',\n    active: true\n  },\n  {\n    protocols: ['SAML'],\n    entityName: 'Namirial ID',\n    logo: NamirialSVGUrl,\n    entityID: 'https://idp.namirialtsp.com/idp',\n    active: true\n  },\n  {\n    protocols: ['SAML'],\n    entityName: 'SPIDItalia Register.it',\n    logo: RegisterItSVGUrl,\n    entityID: 'https://spid.register.it',\n    active: true\n  },\n  {\n    protocols: ['SAML'],\n    entityName: 'Intesa ID',\n    logo: IntesaSVGUrl,\n    entityID: 'https://spid.intesa.it',\n    active: true\n  },\n  {\n    protocols: ['SAML'],\n    entityName: 'Lepida ID',\n    logo: LepidaSVGUrl,\n    entityID: 'https://id.lepida.it/idp/shibboleth',\n    active: true\n  }\n];\n","import { ProviderRecord } from '..';\nimport { providers } from './providers';\nimport {\n  ConfigurationGET,\n  ConfigurationPOST,\n  Protocols,\n  RegisteredProviderRecord\n} from './types';\n\nexport function mergeProviders(\n  providers: Readonly<RegisteredProviderRecord>[],\n  extraProviders: ProviderRecord[]\n): RegisteredProviderRecord[] {\n  return [\n    ...providers.map((idp) => ({\n      ...idp,\n      active: !extraProviders.length\n    })),\n    ...extraProviders.map((idp) => ({\n      ...idp,\n      protocols: idp.protocols ?? ['SAML'],\n      active: true\n    }))\n  ];\n}\n\nexport function validateURL(url: string | undefined) {\n  if (url == null || url.indexOf('{{idp}}') < 0) {\n    throw Error('URL parameter must contain the \"{{idp}} string');\n  }\n}\n\nexport function isGetMethod(\n  configuration: ConfigurationGET | ConfigurationPOST\n): configuration is ConfigurationGET {\n  return configuration.method.toUpperCase() === 'GET';\n}\n\nfunction dirtyCopy<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj));\n}\n// Used for exporting\n/**\n * Returns a copy of the list of the official providers.\n * @private\n */\nexport const providersCopy = dirtyCopy(providers) as RegisteredProviderRecord[];\n\n/**\n * Returns a copy of the list of the official providers, already shuffled\n */\nexport function getShuffledProviders() {\n  return providersCopy.sort(() => Math.random() - 0.5);\n}\n\nexport function isProviderActive(\n  idp: RegisteredProviderRecord,\n  supported: string[],\n  protocol: Protocols,\n  extraProviders: ProviderRecord[]\n) {\n  const isExtraProviders = extraProviders.some(\n    ({ entityID }) => entityID === idp.entityID\n  );\n  return (\n    supported.indexOf(idp.entityID) > -1 &&\n    idp.protocols.indexOf(protocol) > -1 &&\n    (extraProviders.length === 0 || isExtraProviders) &&\n    idp.active\n  );\n}\n","const translations = {\n  it: {\n    naviga_indietro: 'Torna indietro',\n    alt_logo_SPID: 'Logo SPID',\n    scegli_provider_SPID: 'Scegli il tuo provider SPID',\n    annulla_accesso: 'Annulla',\n    non_hai_SPID: 'Non hai SPID?',\n    cosa_SPID: \"Cos'è SPID?\",\n    entra_con_SPID: 'Entra con SPID',\n    scopri_di_piu: 'Scopri di più.',\n    accedi_con_idp: 'Accedi a SPID con {0}',\n    idp_disabled: 'Provider non attivo',\n    maggiori_info: 'Maggiori info'\n  },\n  en: {\n    naviga_indietro: 'Go back',\n    alt_logo_SPID: 'SPID logo',\n    scegli_provider_SPID: 'Choose your SPID provider',\n    annulla_accesso: 'Cancel',\n    non_hai_SPID: \"Don't have SPID?\",\n    cosa_SPID: 'What is SPID?',\n    entra_con_SPID: 'Sign in with SPID',\n    scopri_di_piu: 'Learn more.',\n    accedi_con_idp: 'Access to SPID with {0}',\n    idp_disabled: 'Provider not enabled',\n    maggiori_info: 'More info'\n  },\n  de: {\n    naviga_indietro: 'Gehen Sie zurück',\n    alt_logo_SPID: 'SPID Logo',\n    scegli_provider_SPID: 'Wähle Ihren SPIDProvider',\n    annulla_accesso: 'Zurücknehmen',\n    non_hai_SPID: 'Haben Sie nicht SPID?',\n    cosa_SPID: 'Was ist SPID?',\n    entra_con_SPID: 'Loggen Sie mit SPID',\n    scopri_di_piu: 'Finde mehr heraus.',\n    accedi_con_idp: 'Zugriff auf SPID mit {0}',\n    idp_disabled: 'Provider nicht aktiviert',\n    maggiori_info: 'Mehr info'\n  }\n} as const;\n\nexport type languages = keyof typeof translations;\nexport type labelKeys = keyof typeof translations[languages];\n\nexport type TranslateFn = (\n  labelKey: labelKeys,\n  placeholderValue?: string\n) => string;\n\nlet currentLang = 'it';\nexport const getTranslationFn = (language: languages): TranslateFn => {\n  currentLang = language;\n  return (labelKey: labelKeys, placeholderValue?: string) => {\n    const text = translations[currentLang]?.[labelKey];\n    if (!text) {\n      throw Error(\n        `labelKey ${labelKey} non presente per la lingua selezionata ${currentLang}`\n      );\n    }\n    const placeholderRegex = /\\{\\d}/;\n    if (placeholderValue != null) {\n      return text.replace(placeholderRegex, placeholderValue);\n    }\n    return text;\n  };\n};\n","export const ESC_KEY = 27;\n\nexport const DEFAULT_TRANSITION_TIME = 2000;\nexport const BUTTON_DELAY_TIME = 1.1;\nexport const DELAY_STEP = 0.1;\n\nexport const possibleStates = {\n  INIT: { type: 'init' },\n  ENTERING: { type: 'entering' },\n  ENTERED: { type: 'entered' },\n  EXITING: { type: 'exiting' },\n  EXITED: { type: 'exited' }\n} as const;\n\nexport const panelAnimClass = 'spid-button-panel-anim';\nexport const logoAnimationOutClass = 'spid-button-logo-animation-out';\nexport const emptyClass = '';\nexport const buttonIconAnimationClass = 'spid-button-icon-animation';\n\nexport const sizeMapping = {\n  sm: 'small',\n  md: 'medium',\n  l: 'large'\n};\n","import { SPIDButtonProps } from '../shared/types';\nimport {\n  buttonIconAnimationClass,\n  possibleStates,\n  sizeMapping\n} from './constants';\nimport { ModalState } from './types';\n\ntype classesProps = Pick<\n  SPIDButtonProps,\n  'theme' | 'corners' | 'size' | 'fluid'\n>;\nexport function computeButtonClasses({\n  theme,\n  corners,\n  size,\n  fluid\n}: classesProps): string[] {\n  if (process.env.NODE_ENV === 'production') {\n    if (size === 'xl') {\n      console.log(\n        'Size \"xl\" is not supported by SPID React Button with Modal variant'\n      );\n    }\n  }\n  return [\n    theme,\n    corners,\n    size ? `size-${sizeMapping[size] ?? 'large'}` : null,\n    fluid ? 'fluid' : null\n  ]\n    .map((type) => (type != null ? `spid-button-${type}` : null))\n    .filter<string>((name: string | null): name is string => name != null);\n}\n\nconst emptyClasses: string[] = [];\nexport function computeButtonTransitionClasses({\n  type\n}: ModalState): { wrapper: string[]; icon: string[] } {\n  const inClass = 'in';\n  switch (type) {\n    case possibleStates.ENTERING.type:\n      return {\n        wrapper: ['spid-button-transition'],\n        icon: [buttonIconAnimationClass, inClass]\n      };\n    case possibleStates.ENTERED.type:\n      return {\n        wrapper: emptyClasses,\n        icon: [buttonIconAnimationClass, inClass]\n      };\n    case possibleStates.EXITING.type:\n      return {\n        wrapper: ['spid-button-reverse-enter-transition'],\n        icon: [buttonIconAnimationClass]\n      };\n    case possibleStates.EXITED.type:\n      return { wrapper: emptyClasses, icon: [buttonIconAnimationClass] };\n    case possibleStates.INIT.type:\n      return { wrapper: emptyClasses, icon: emptyClasses };\n  }\n}\n\nexport function isVisible(modalState: ModalState) {\n  return modalState.type.includes('enter');\n}\n\nexport function getDefinedClasses(\n  klasses: string[],\n  styles: Record<string, string>\n) {\n  return klasses\n    ?.map((klass) => styles[klass])\n    .filter(Boolean)\n    .join(' ');\n}\n","import React from 'react';\n\nimport { emptyClass, possibleStates } from './constants';\n\nimport { isGetMethod } from '../shared/utils';\nimport { isVisible } from './utils';\n\nimport type { TranslateFn } from '../shared/i18n';\nimport type { ModalState } from './types';\nimport type {\n  ProviderRecord,\n  RegisteredProviderRecord,\n  SPIDButtonProps\n} from '../shared/types';\n\nimport styles from './index.module.css';\n\nconst ProviderButtonContent = ({\n  entityName,\n  logo\n}: Pick<RegisteredProviderRecord, 'entityName' | 'logo'>) => {\n  if (logo == null) {\n    return <span>{entityName}</span>;\n  }\n  return <img src={`${logo}`} alt={entityName} style={{ maxWidth: '90%' }} />;\n};\n\ntype ProviderButtonProps = Required<\n  Pick<SPIDButtonProps, 'url' | 'configuration'>\n> &\n  Pick<SPIDButtonProps, 'onProviderClicked'> & {\n    idp: RegisteredProviderRecord;\n    entityID: ProviderRecord['entityID'];\n    i18n: TranslateFn;\n    isActive: boolean;\n    delay: number;\n    visibility: ModalState;\n  };\nexport const ProviderButton = ({\n  idp,\n  entityID,\n  url,\n  i18n,\n  isActive,\n  delay,\n  visibility,\n  configuration,\n  onProviderClicked\n}: ProviderButtonProps) => {\n  const actionURL = url.replace('{{idp}}', encodeURIComponent(entityID));\n  const linkTitle = isActive\n    ? i18n('accedi_con_idp', idp.entityName)\n    : i18n('idp_disabled');\n  const {\n    classNames,\n    style\n  }: {\n    classNames: string;\n    style?: Record<string, string>;\n  } = isVisible(visibility)\n    ? visibility.type === possibleStates.ENTERING.type\n      ? {\n          classNames: 'spid-button-idp-fade-in',\n          style: { animationDelay: `${delay}s` }\n        }\n      : { classNames: emptyClass }\n    : { classNames: emptyClass };\n  const loginURL = isActive ? actionURL : undefined;\n\n  if (isGetMethod(configuration)) {\n    return (\n      <span\n        className={`${styles['spid-button-idp']} ${styles[classNames] ?? ''}`}\n        style={style}\n      >\n        <a\n          id={entityID}\n          title={linkTitle}\n          href={loginURL}\n          // @ts-expect-error\n          disabled={!isActive}\n          onClick={(e) => onProviderClicked?.(idp, loginURL, e)}\n          role='link'\n        >\n          <ProviderButtonContent entityName={idp.entityName} logo={idp.logo} />\n        </a>\n      </span>\n    );\n  }\n  const { fieldName, extraFields = {} } = configuration;\n  return (\n    <span className={styles['spid-button-idp']}>\n      <form action={actionURL} method='POST'>\n        <button\n          id={entityID}\n          type='submit'\n          className={styles['spid-button-idp-button']}\n          title={linkTitle}\n          disabled={!isActive}\n          onClick={(e) => {\n            if (!isActive) {\n              e.preventDefault();\n            }\n            return onProviderClicked?.(idp, loginURL, e);\n          }}\n        >\n          <ProviderButtonContent entityName={idp.entityName} logo={idp.logo} />\n        </button>\n        <input type='hidden' name={fieldName} value={entityID} />\n        {Object.entries(extraFields).map(([inputName, inputValue]) => {\n          return (\n            <input\n              key={inputName}\n              type='hidden'\n              name={inputName}\n              value={inputValue}\n            />\n          );\n        })}\n      </form>\n    </span>\n  );\n};\n","import React from 'react';\nimport SpidLogoAnimationBlackUrl from '/../shared/svgs/spid-logo-animation-black.svg';\nimport SpidLogoUrl from '/../shared/svgs/spid-logo.svg';\nimport CloseSvgUrl from '/../shared/svgs/close.svg';\n\nimport type {\n  RegisteredProviderRecord,\n  SPIDButtonProps\n} from '../shared/types';\n\nimport {\n  BUTTON_DELAY_TIME,\n  DELAY_STEP,\n  emptyClass,\n  logoAnimationOutClass,\n  panelAnimClass,\n  possibleStates\n} from './constants';\nimport type { ModalState } from './types';\nimport { isProviderActive } from '../shared/utils';\nimport { isVisible } from './utils';\nimport { ProviderButton } from './ProviderButton';\nimport { TranslateFn } from '../shared/i18n';\n\nimport styles from './index.module.css';\n\nconst ButtonImage = ({ url, altText }: { url: string; altText: string }) => (\n  <img aria-hidden='true' src={url} alt={altText} style={{ float: 'left' }} />\n);\n\nfunction getModalClasses({ type }: ModalState) {\n  const fadeInLeftClass = `spid-button-fade-in-left`;\n  switch (type) {\n    case possibleStates.ENTERING.type:\n      return {\n        panel: panelAnimClass,\n        buttonLogo: fadeInLeftClass,\n        buttonClose: fadeInLeftClass,\n        buttonManIcon: emptyClass\n      };\n    case possibleStates.EXITING.type:\n      return {\n        panel: panelAnimClass,\n        buttonLogo: emptyClass,\n        buttonClose: emptyClass,\n        buttonManIcon: logoAnimationOutClass\n      };\n    case possibleStates.ENTERED.type:\n    case possibleStates.EXITED.type:\n    case possibleStates.INIT.type: {\n      return {\n        panel: emptyClass,\n        buttonLogo: emptyClass,\n        buttonClose: emptyClass,\n        buttonManIcon: emptyClass\n      };\n    }\n  }\n}\n\ntype ProvidersModalProps = Required<\n  Pick<\n    SPIDButtonProps,\n    | 'supported'\n    | 'protocol'\n    | 'url'\n    | 'mapping'\n    | 'configuration'\n    | 'extraProviders'\n  >\n> &\n  Pick<SPIDButtonProps, 'onProviderClicked'> & {\n    i18n: TranslateFn;\n    visibility: ModalState;\n    providers: RegisteredProviderRecord[];\n    closeModal: () => void;\n  };\nexport const ProvidersModal = ({\n  i18n,\n  mapping,\n  visibility,\n  extraProviders = [],\n  supported,\n  providers,\n  protocol,\n  url,\n  closeModal,\n  configuration,\n  onProviderClicked\n}: ProvidersModalProps) => {\n  const {\n    panel: panelClasses,\n    buttonClose: buttonCloseClasses,\n    buttonLogo: buttonLogoClasses,\n    buttonManIcon: buttonManIconClasses\n  } = getModalClasses(visibility);\n\n  return (\n    <section\n      className={styles['spid-enter-container']}\n      hidden={!isVisible(visibility)}\n    >\n      <div className={styles['spid-enter']}>\n        <section\n          className={`${styles['spid-button-panel']} ${\n            styles['spid-button-panel-select'] ?? ''\n          } ${styles[panelClasses] ?? ''}`}\n          aria-label={i18n('scegli_provider_SPID')}\n          tabIndex={0}\n        >\n          <header className={styles['spid-button-header']}>\n            <div className={styles['spid-button-panel-back']}>\n              <div\n                className={`${styles['spid-button-logo']} ${\n                  styles[buttonLogoClasses] ?? ''\n                }`}\n              >\n                <ButtonImage\n                  url={SpidLogoUrl}\n                  altText={i18n('alt_logo_SPID')}\n                />\n              </div>\n              <div\n                className={`${styles['spid-button-close-button']} ${\n                  styles['spid-button-fade-out-right']\n                } ${styles[buttonCloseClasses] ?? ''}`}\n              >\n                <button\n                  tabIndex={0}\n                  className={`${styles['spid-button-panel-close-button']} ${styles['spid-button-navigable']}`}\n                  aria-label={i18n('naviga_indietro')}\n                  onClick={closeModal}\n                >\n                  <ButtonImage\n                    url={CloseSvgUrl}\n                    altText={i18n('naviga_indietro')}\n                  />\n                </button>\n              </div>\n            </div>\n          </header>\n          <div className={styles['spid-button-panel-content']}>\n            <img\n              className={`${styles['spid-button-little-man-icon']} ${\n                styles[buttonManIconClasses] ?? ''\n              }`}\n              src={SpidLogoAnimationBlackUrl}\n              alt={i18n('entra_con_SPID')}\n            />\n            <div className={styles['spid-button-panel-content-center']}>\n              <h1\n                className={`${styles['spid-enter-title-page']} ${styles['spid-button-fade-in-bottom']} ${styles['spid-button-fade-out-bottom']}`}\n              >\n                {i18n('scegli_provider_SPID')}\n              </h1>\n              <div className={styles['spid-idp-list']}>\n                {providers.map((idp, i) => {\n                  const isActive = isProviderActive(\n                    idp,\n                    supported,\n                    protocol,\n                    extraProviders\n                  );\n                  const entityID =\n                    idp.entityID in mapping\n                      ? mapping[idp.entityID]\n                      : idp.entityID;\n                  return (\n                    <ProviderButton\n                      key={entityID}\n                      idp={idp}\n                      entityID={entityID}\n                      url={url}\n                      isActive={isActive}\n                      i18n={i18n}\n                      visibility={visibility}\n                      delay={BUTTON_DELAY_TIME + DELAY_STEP * (i + 1)}\n                      configuration={configuration}\n                      onProviderClicked={onProviderClicked}\n                    />\n                  );\n                })}\n              </div>\n              <div className={styles['spid-non-hai-spid']}>\n                {i18n('non_hai_SPID')}{' '}\n                <a\n                  href='https://www.spid.gov.it/richiedi-spid'\n                  target='_blank noreferrer'\n                >\n                  {i18n('scopri_di_piu')}\n                </a>\n              </div>\n            </div>\n            <div className={styles['spid-foot-btn']}>\n              <button\n                className={styles['spid-cancel-access-button']}\n                onClick={closeModal}\n              >\n                {i18n('annulla_accesso')}\n              </button>\n            </div>\n          </div>\n        </section>\n      </div>\n    </section>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport SpidIcoCircleLbUrl from '/../shared/svgs/spid-ico-circle-lb.svg';\nimport SpidIcoCircleBbUrl from '/../shared/svgs/spid-ico-circle-bb.svg';\n\nimport { getTranslationFn } from '../shared/i18n';\nimport {\n  computeButtonClasses,\n  computeButtonTransitionClasses,\n  isVisible,\n  getDefinedClasses\n} from './utils';\n\nimport { DEFAULT_TRANSITION_TIME, ESC_KEY, possibleStates } from './constants';\nimport {\n  mergeProviders,\n  validateURL,\n  getShuffledProviders\n} from '../shared/utils';\nimport { ProvidersModal } from './ProvidersModal';\n\nimport type { TranslateFn } from '../shared/i18n';\nimport type { SPIDButtonProps } from '../shared/types';\nimport type { ModalState } from './types';\n\nimport styles from './index.module.css';\n\nconst providersList = getShuffledProviders();\n\nconst LoginButton = ({\n  i18n,\n  theme,\n  corners,\n  fluid,\n  size,\n  toggleModal,\n  modalVisibility\n}: Pick<SPIDButtonProps, 'theme' | 'corners' | 'fluid' | 'size'> & {\n  i18n: TranslateFn;\n  modalVisibility: ModalState;\n  toggleModal: (prevState: boolean) => void;\n}) => {\n  const customStylingClasses = computeButtonClasses({\n    theme,\n    corners,\n    size,\n    fluid\n  });\n  const {\n    wrapper: wrapperTransitionClasses,\n    icon: iconButtonClasses\n  } = computeButtonTransitionClasses(modalVisibility);\n  const buttonImageUrl =\n    theme === 'negative' ? SpidIcoCircleLbUrl : SpidIcoCircleBbUrl;\n  return (\n    <button\n      className={`${styles['spid-button']} ${getDefinedClasses(\n        customStylingClasses,\n        styles\n      )} ${getDefinedClasses(wrapperTransitionClasses, styles)}`}\n      onClick={() => toggleModal(true)}\n    >\n      <span\n        aria-hidden={!isVisible(modalVisibility)}\n        className={`${styles['spid-button-icon']} ${getDefinedClasses(\n          iconButtonClasses,\n          styles\n        )}`}\n      >\n        <img src={buttonImageUrl} alt='Login logo' />\n      </span>\n      <span className={styles['spid-button-text']}>\n        {i18n('entra_con_SPID')}\n      </span>\n    </button>\n  );\n};\n\n/**\n * The specific component button with the modal.\n * Use this component when you want to minimize the footprint in your project.\n * It accepts the same props as the main component. The `type` prop is ignored in this case.\n *\n * Mind this component requires the `css` from `spid-smart-button` to be imported.\n * @param props\n */\nexport const SPIDReactButton = ({\n  lang = 'it',\n  extraProviders = [],\n  corners = 'rounded',\n  fluid = true,\n  size = 'md',\n  theme = 'positive',\n  configuration = { method: 'GET' },\n  mapping = {},\n  protocol = 'SAML',\n  url,\n  supported = providersList.map(({ entityID }) => entityID),\n  onProvidersShown,\n  onProvidersHidden,\n  onProviderClicked\n}: SPIDButtonProps) => {\n  const [state, setState] = useState<ModalState>(possibleStates.INIT);\n\n  useEffect(() => {\n    const escHandler = (event: KeyboardEvent) => {\n      if (event.keyCode === ESC_KEY) {\n        setState(possibleStates.EXITING);\n      }\n    };\n    if (isVisible(state)) {\n      document.addEventListener('keyup', escHandler);\n    }\n    return () => document.removeEventListener('keyup', escHandler);\n  }, [state]);\n\n  useEffect(() => {\n    if (state.type === possibleStates.ENTERING.type) {\n      if (onProvidersShown) {\n        onProvidersShown();\n      }\n    }\n    if (state.type === possibleStates.EXITING.type) {\n      if (onProvidersHidden) {\n        onProvidersHidden();\n      }\n    }\n  }, [state]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (state.type === possibleStates.ENTERING.type) {\n      timer = setTimeout(\n        () => setState(possibleStates.ENTERED),\n        DEFAULT_TRANSITION_TIME\n      );\n    }\n    if (state.type === possibleStates.EXITING.type) {\n      timer = setTimeout(\n        () => setState(possibleStates.EXITED),\n        DEFAULT_TRANSITION_TIME\n      );\n    }\n    return () => {\n      if (timer != null) {\n        clearTimeout(timer);\n      }\n    };\n  }, [state]);\n\n  validateURL(url);\n\n  const translateFn = getTranslationFn(lang);\n\n  const moreLoginProps = {\n    theme,\n    corners,\n    fluid,\n    size\n  };\n\n  const moreModalProps = {\n    extraProviders,\n    configuration,\n    url,\n    mapping,\n    protocol,\n    supported,\n    onProviderClicked\n  };\n\n  const mergedProviders = mergeProviders(providersList, extraProviders);\n\n  return (\n    <div aria-live='polite'>\n      <ProvidersModal\n        visibility={state}\n        i18n={translateFn}\n        providers={mergedProviders}\n        closeModal={() => setState(possibleStates.EXITING)}\n        {...moreModalProps}\n      />\n      <LoginButton\n        modalVisibility={state}\n        i18n={translateFn}\n        toggleModal={(open: boolean) =>\n          setState(open ? possibleStates.ENTERING : possibleStates.EXITING)\n        }\n        {...moreLoginProps}\n      />\n    </div>\n  );\n};\n","export const sizeMapping = {\n  sm: 'small',\n  md: 'medium',\n  l: 'large',\n  xl: 'extraLarge'\n} as const;\n","import { sizeMapping } from './constants';\n\nimport type { Sizes } from '../shared/types';\n\nexport const getButtonSizeClass = (size: Sizes | 'xl') => {\n  return sizeMapping[size];\n};\n\nexport const getIdpButtonSizeClass = (size: Sizes | 'xl') => {\n  const currentSize = sizeMapping[size];\n  return 'idpButton' + currentSize[0].toUpperCase() + currentSize.slice(1);\n};\n","import React from 'react';\n\nimport { isGetMethod, isProviderActive } from '../shared/utils';\nimport { getIdpButtonSizeClass } from './util';\n\nimport type { TranslateFn } from '../shared/i18n';\nimport type {\n  RegisteredProviderRecord,\n  SPIDButtonProps\n} from '../shared/types';\n\nimport styles from './index.module.css';\n\ntype ProvidersDropdownProps = Required<\n  Pick<\n    SPIDButtonProps,\n    | 'url'\n    | 'supported'\n    | 'mapping'\n    | 'size'\n    | 'configuration'\n    | 'protocol'\n    | 'extraProviders'\n  >\n> &\n  Pick<SPIDButtonProps, 'onProviderClicked'> & {\n    i18n: TranslateFn;\n    providers: RegisteredProviderRecord[];\n  };\nexport const ProvidersDropdown = ({\n  configuration,\n  supported,\n  url,\n  mapping,\n  i18n,\n  size,\n  protocol,\n  providers,\n  extraProviders,\n  onProviderClicked\n}: ProvidersDropdownProps) => {\n  return (\n    <div\n      className={`${styles.idpButton} ${styles.idpButtonTip} ${\n        styles[getIdpButtonSizeClass(size)]\n      }`}\n    >\n      <ul\n        className={styles.idpButtonMenu}\n        aria-label={i18n('scegli_provider_SPID')}\n      >\n        {providers.map((idp) => {\n          const isActive = isProviderActive(\n            idp,\n            supported,\n            protocol,\n            extraProviders\n          );\n          return (\n            <li data-idp={idp.entityName} key={idp.entityName}>\n              <ProviderButton\n                idp={idp}\n                url={url}\n                isActive={isActive}\n                mapping={mapping}\n                i18n={i18n}\n                configuration={configuration}\n                onProviderClicked={onProviderClicked}\n              />\n            </li>\n          );\n        })}\n        <li className={styles.supportLink}>\n          <a href='http://www.spid.gov.it'>{i18n('maggiori_info')}</a>\n        </li>\n        <li className={styles.supportLink}>\n          <a href='http://www.spid.gov.it/#registrati'>\n            {i18n('non_hai_SPID')}\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\ntype ProviderButtonProps = Required<\n  Pick<SPIDButtonProps, 'url' | 'mapping' | 'configuration'>\n> &\n  Pick<SPIDButtonProps, 'onProviderClicked'> & {\n    idp: RegisteredProviderRecord;\n    isActive: boolean;\n    i18n: TranslateFn;\n  };\nconst ProviderButton = ({\n  idp,\n  configuration,\n  url,\n  isActive,\n  mapping,\n  i18n,\n  onProviderClicked\n}: ProviderButtonProps) => {\n  const entityID =\n    idp.entityID in mapping ? mapping[idp.entityID] : idp.entityID;\n  const actionURL = url.replace('{{idp}}', encodeURIComponent(entityID));\n  const linkTitle = isActive\n    ? i18n('accedi_con_idp', idp.entityName)\n    : i18n('idp_disabled');\n\n  const loginURL = isActive ? actionURL : undefined;\n  if (isGetMethod(configuration)) {\n    return (\n      <a\n        title={linkTitle}\n        href={loginURL}\n        // @ts-expect-error\n        disabled={!isActive}\n        className={`${styles.idpLogo} ${isActive ? '' : styles.disabled}`}\n        onClick={(e) => onProviderClicked?.(idp, loginURL, e)}\n        role='link'\n        id={entityID}\n      >\n        <ProviderButtonContent idp={idp} title={linkTitle} />\n      </a>\n    );\n  }\n  const { fieldName, extraFields = {} } = configuration;\n  return (\n    <form name='spid_idp_access' action={actionURL} method='POST'>\n      <button\n        className={`${styles.idpLogo} ${isActive ? '' : styles.disabled}`}\n        id={entityID}\n        name={linkTitle}\n        title={linkTitle}\n        type='submit'\n        onClick={(e) => {\n          if (!isActive) {\n            e.preventDefault();\n          }\n          return onProviderClicked?.(idp, loginURL, e);\n        }}\n      >\n        <ProviderButtonContent idp={idp} title={linkTitle} />\n      </button>\n      <input type='hidden' name={fieldName} value={entityID} />\n      {Object.entries(extraFields).map(([inputName, inputValue]) => {\n        return (\n          <input\n            key={inputName}\n            type='hidden'\n            name={inputName}\n            value={inputValue}\n          />\n        );\n      })}\n    </form>\n  );\n};\n\nconst ProviderButtonContent = ({\n  idp,\n  title\n}: {\n  idp: RegisteredProviderRecord;\n  title: string;\n}) => {\n  if (idp.logo == null) {\n    return <span>{idp.entityName}</span>;\n  }\n  return (\n    <span>\n      <span className={styles.srOnly}>{title}</span>\n      <img src={idp.logo} alt={idp.entityName} title={idp.entityName} />\n    </span>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport SpidIcoCircleBbUrl from '/../shared/svgs/spid-ico-circle-bb.svg';\nimport SpidIcoCircleLbUrl from '/../shared/svgs/spid-ico-circle-lb.svg';\nimport { getTranslationFn } from '../shared/i18n';\nimport { SPIDButtonProps } from '../shared/types';\nimport {\n  validateURL,\n  getShuffledProviders,\n  mergeProviders\n} from '../shared/utils';\n\nimport styles from './index.module.css';\nimport { ProvidersDropdown } from './ProvidersMenu';\nimport { getButtonSizeClass } from './util';\n\nconst shuffledProviders = getShuffledProviders();\n/**\n * The specific component button with the dropdown.\n * Use this component when you want to minimize the footprint in your project.\n * It accepts the same props as the main component. The `type` prop is ignored in this case.\n *\n * @param props\n */\nexport const SPIDReactButton = ({\n  url,\n  lang = 'it',\n  supported = shuffledProviders.map(({ entityID }) => entityID),\n  mapping = {},\n  size = 'md',\n  configuration = { method: 'GET' },\n  theme = 'positive',\n  protocol = 'SAML',\n  extraProviders = [],\n  onProviderClicked,\n  onProvidersHidden,\n  onProvidersShown\n}: SPIDButtonProps) => {\n  const [openDropdown, toggleDropdown] = useState<boolean | undefined>(\n    undefined\n  );\n\n  const i18n = getTranslationFn(lang);\n\n  useEffect(() => {\n    if (openDropdown && onProvidersShown) {\n      onProvidersShown();\n    }\n    if (openDropdown === false && onProvidersHidden) {\n      onProvidersHidden();\n    }\n  }, [openDropdown]);\n\n  validateURL(url);\n\n  const mergedProviders = mergeProviders(shuffledProviders, extraProviders);\n\n  const buttonImageUrl =\n    theme === 'negative' ? SpidIcoCircleLbUrl : SpidIcoCircleBbUrl;\n\n  return (\n    <div className={styles.container}>\n      <a\n        href='#'\n        className={`${styles.button} ${styles[getButtonSizeClass(size)]} ${\n          theme === 'positive' ? styles.theme : styles.themeNegative\n        }`}\n        aria-haspopup='true'\n        aria-expanded={openDropdown}\n        onClick={() => toggleDropdown(!openDropdown)}\n      >\n        <span className={styles.buttonIcon}>\n          <img src={buttonImageUrl} alt='Login logo' />\n        </span>\n        <span className={styles.buttonText}>{i18n('entra_con_SPID')}</span>\n      </a>\n      {openDropdown && (\n        <ProvidersDropdown\n          supported={supported}\n          url={url}\n          mapping={mapping}\n          i18n={i18n}\n          size={size}\n          configuration={configuration}\n          protocol={protocol}\n          providers={mergedProviders}\n          extraProviders={extraProviders}\n          onProviderClicked={onProviderClicked}\n        />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SPIDReactButton as SPIDReactButtonModal } from './modalVariant';\nimport { SPIDReactButton as SPIDReactButtonDropdown } from './dropdownVariant';\nimport type { SPIDButtonProps } from './shared/types';\n/**\n * The main component for the button.\n * Use this component with the `type` prop to select the version you prefer.\n * @param props\n */\nexport const SPIDReactButton = ({\n  type = 'modal',\n  ...props\n}: SPIDButtonProps) => {\n  if (type === 'modal') {\n    return <SPIDReactButtonModal {...props} />;\n  }\n  return <SPIDReactButtonDropdown {...props} />;\n};\n","import React from 'react'\n\nimport {  Header, HeaderContent, HeaderBrand, HeaderRightZone, HeaderSocialsZone, Icon } from 'design-react-kit';\n\nexport const AppHeader = () => (<Header\n    type=\"center\"\n  >\n    <HeaderContent>\n      <HeaderBrand\n        iconName=\"it-code-circle\"\n        tag=\"a\"\n      >\n        <h2>\n          SPID React button\n    </h2>\n        <h3>\n          The React component for the SPID smart button\n    </h3>\n      </HeaderBrand>\n      <HeaderRightZone>\n        <HeaderSocialsZone>\n          <ul>\n            <li>\n              <a\n                aria-label=\"Github\"\n                href=\"https://github.com/dej611/spid-react-button\"\n                target=\"_blank noreferrer\"\n              >\n                <Icon\n                  color=\"\"\n                  icon=\"it-github\"\n                  padding={false}\n                  size=\"\"\n                />\n              </a>\n            </li>\n          </ul>\n        </HeaderSocialsZone>\n      </HeaderRightZone>\n    </HeaderContent>\n  </Header>)","import { getShuffledProviders } from \"@dej611/spid-react-button\";\n\nimport {Protocols, Languages, Sizes, CornerType, ColorTheme, ConfigurationGET, ConfigurationPOST, Types, SPIDButtonProps} from '@dej611/spid-react-button'\n\nexport const defaultURL = \"/myLogin/idp={{idp}}\";\nexport const providersList = getShuffledProviders();\nexport const languages: Languages[] = ['it', 'en', 'de']\nexport const configurations: [ConfigurationGET, ConfigurationPOST] = [{ method: 'GET' }, { method: 'POST', fieldName: 'prova' }]\nexport const protocols: Protocols[] = ['SAML', 'OIDC']\nexport const sizes: Sizes[] = ['sm', 'md', 'l']\nexport const colorThemes: ColorTheme[] = ['positive', 'negative']\nexport const cornerTypes: CornerType[] = ['rounded', 'sharp']\nexport const types: Types[] = ['modal', 'dropdown']\n\n\nexport type NoFunctionProps = Required<Omit<SPIDButtonProps, 'onProvidersShown' | 'onProvidersHidden' | 'onProviderClicked'>>\n\nexport const initState: NoFunctionProps = {\n    lang: languages[0],\n    url: defaultURL,\n    mapping: {},\n    supported: providersList.slice(0, 4).map(({entityID}) => entityID),\n    protocol: protocols[0],\n    size: sizes[1],\n    theme: colorThemes[0],\n    fluid: false,\n    corners: cornerTypes[0],\n    configuration: configurations[0],\n    extraProviders: [],\n    type: types[0]\n  }","import React from 'react';\nimport Select, { components } from 'react-select'\nimport { Icon } from 'design-react-kit';\n\nconst Option = (props: any) => {\n  return (\n    <div className=\"select-pill text-primary\">\n      <components.Option {...props} />\n    </div>\n  )\n}\n\nconst DropdownIndicator = (props: any) => {\n  return (\n    <components.DropdownIndicator {...props}>\n      <Icon icon=\"it-arrow-down-triangle\" aria-hidden={true} />\n    </components.DropdownIndicator>\n  )\n}\n\ntype SelectProps<T> = {\n  options: {value: T, label: string}[]\n  onChange: (selectedOption: {label: string, value: T} | null) => void,\n  label: string,\n  selectedValue: {value: T, label: string}\n};\n\nlet counter = 0;\nconst generatedIds = {};\nconst idGenerator = (label: string): string => {\n  generatedIds[label] = generatedIds[label] || `selectExampleClassic-${counter}`;\n  return generatedIds[label];\n}\n\nexport function SelectComponent<T = unknown>({options, onChange, label, selectedValue}: SelectProps<T>) {\n  return (\n    <div className=\"bootstrap-select-wrapper\">\n      <label htmlFor={idGenerator(label)}>{label}</label>\n      <Select\n        components={{\n          Option,\n          DropdownIndicator,\n          IndicatorSeparator: null\n        }}\n        styles={{\n          container: provided => ({ ...provided, height: '2.5rem' }),\n          valueContainer: provided => ({ ...provided, height: '2.5rem' }),\n          control: provided => ({ ...provided, height: '2.5rem' })\n        }}\n        id={idGenerator(label)}\n        onChange={onChange}\n        options={options}\n        placeholder={label}\n        aria-label={label}\n        classNamePrefix=\"react-select\"\n        value={selectedValue}\n      />\n    </div>\n  )\n}","import React from 'react';\n\nimport { SPIDButtonProps } from '@dej611/spid-react-button'\n// @ts-expect-error\nimport { Input, Col, Row, Toggle, FormGroup, Label } from 'design-react-kit';\nimport { SelectComponent } from './BISelect';\nimport { colorThemes, configurations, cornerTypes, languages, NoFunctionProps, protocols, providersList, sizes, types } from './constants';\n\nfunction getOptionsAndCurrentSelection<T>(labels: string[], options: T[], currentState: SPIDButtonProps, prop: keyof SPIDButtonProps) {\n  const outputOptions = labels.map(\n    (label, i) => ({ label, value: options[i] })\n  );\n  // @ts-expect-error\n  const currentSelection = outputOptions.find(({ value }) => value === currentState[prop])\n  return { options: outputOptions, selection: currentSelection! }\n}\n\ntype ConfiguratorProps = {\n  buttonProps: NoFunctionProps,\n  updateProp: <T extends keyof NoFunctionProps>(prop: T, newValue: NoFunctionProps[T]) => void,\n  setValidURL: (newValue: boolean) => void,\n  isValidURL: boolean\n}\n\nexport const Configurator = ({ buttonProps, updateProp, setValidURL, isValidURL }: ConfiguratorProps) => {\n\n\n  const { options: langOptions, selection: langSelection } = getOptionsAndCurrentSelection(['Italiano', 'English', 'Deutsche'], languages, buttonProps, 'lang')\n  const { options: sizeOptions, selection: sizeSelection } = getOptionsAndCurrentSelection(['Small', 'Medium', 'Large'], sizes, buttonProps, 'size')\n  const { options: colorSchemeOptions, selection: colorThemeSelection } = getOptionsAndCurrentSelection(['Positive', 'Negative'], colorThemes, buttonProps, 'theme')\n  const { options: protocolOptions, selection: protocolSelection } = getOptionsAndCurrentSelection(['SAML', 'OIDC'], protocols, buttonProps, 'protocol')\n  const { options: cornerTypeOptions, selection: cornerTypeSelection } = getOptionsAndCurrentSelection(['Rounded', 'Sharp'], cornerTypes, buttonProps, 'corners')\n  const { options: methodOptions, selection: methodSelection } = getOptionsAndCurrentSelection(['GET', 'POST'], configurations, buttonProps, 'configuration')\n  const { options: typeOptions, selection: typeSelection } = getOptionsAndCurrentSelection(['Modal', 'Dropown'], types, buttonProps, 'type')\n\n  const validProps = isValidURL ? { valid: true } : { invalid: true }\n  return <>\n    <div className=\"form-row\">\n      <Col md={6}>\n        <Input\n          label={\"URL - must contain '{{idp}}':\"}\n          placeholder='Add a URL'\n          value={buttonProps.url}\n          {...validProps}\n          infoText={isValidURL ? '' : 'Please add the \"{{idp}}\" string in it'}\n          onChange={(event) => {\n            // @ts-expect-error\n            const newURL = event.target.value;\n            setValidURL(newURL.indexOf('{{idp}}') > -1);\n            updateProp('url', newURL);\n          }}\n        />\n      </Col>\n      <Col>\n        <FormGroup className=\"m-8\">\n          <SelectComponent\n            label='Method:'\n            selectedValue={methodSelection}\n            options={methodOptions}\n            onChange={(selectedOption) => {\n              if (selectedOption != null && configurations.includes(selectedOption.value)) {\n                updateProp('configuration', selectedOption.value)\n              }\n            }}\n          />\n        </FormGroup>\n      </Col>\n    </div>\n    <div className=\"form-row\">\n      <Col md={6}>\n        <FormGroup className=\"m-8\">\n          <SelectComponent\n            label='Language:'\n            selectedValue={langSelection}\n            options={langOptions}\n            onChange={(selectedOption) => {\n              if (selectedOption != null && languages.includes(selectedOption.value)) {\n                updateProp('lang', selectedOption.value)\n              }\n            }}\n          />\n        </FormGroup>\n      </Col>\n      <Col md={6}>\n        <FormGroup className=\"m-8\">\n          <SelectComponent\n            label='Size:'\n            selectedValue={sizeSelection}\n            options={sizeOptions}\n            onChange={(selectedOption) => {\n              if (selectedOption != null && sizes.includes(selectedOption.value)) {\n                updateProp('size', selectedOption.value)\n              }\n            }}\n          />\n        </FormGroup>\n      </Col>\n    </div>\n    <div className=\"form-row\">\n      <Col md={6}>\n        <FormGroup className=\"m-8\">\n          <SelectComponent\n            label='Theme:'\n            selectedValue={colorThemeSelection}\n            options={colorSchemeOptions}\n            onChange={(selectedOption) => {\n              if (selectedOption != null && colorThemes.includes(selectedOption.value)) {\n                updateProp('theme', selectedOption.value)\n              }\n            }}\n          />\n        </FormGroup>\n      </Col>\n      <Col md={6}>\n        <FormGroup className=\"m-8\">\n          <SelectComponent\n            label='Corners style:'\n            selectedValue={cornerTypeSelection}\n            options={cornerTypeOptions}\n            onChange={(selectedOption) => {\n              if (selectedOption != null && cornerTypes.includes(selectedOption.value)) {\n                updateProp('corners', selectedOption.value)\n              }\n            }}\n          />\n        </FormGroup>\n      </Col>\n    </div>\n    <div className=\"form-row\">\n      <Col>\n        <FormGroup check>\n          <Toggle\n            label='Fluid'\n            checked={buttonProps.fluid}\n            onChange={({ target }) => {\n              // @ts-expect-error\n              updateProp('fluid', target.checked)\n            }}\n          />\n        </FormGroup>\n      </Col>\n      <Col md={4}>\n        <FormGroup className=\"m-8\">\n        <SelectComponent\n          label='Type'\n          selectedValue={typeSelection}\n          options={typeOptions}\n          onChange={(selectedOption) => {\n            if (selectedOption != null && types.includes(selectedOption.value)) {\n              updateProp('type', selectedOption.value)\n            }\n          }}\n        />\n        </FormGroup>\n      </Col>\n      <Col md={4}>\n        <FormGroup className=\"m-8\">\n        <SelectComponent\n          label='Protocol'\n          selectedValue={protocolSelection}\n          options={protocolOptions}\n          onChange={(selectedOption) => {\n            if (selectedOption != null && protocols.includes(selectedOption.value)) {\n              updateProp('protocol', selectedOption.value)\n            }\n          }}\n        />\n        </FormGroup>\n      </Col>\n    </div>\n    <Row>\n      <fieldset>\n        <legend>Provider supported:</legend>\n        <FormGroup check>\n          {providersList.map(({ entityID, entityName, logo }) => <div key={entityName}>\n            <Input id={entityName} type=\"checkbox\" checked={buttonProps.supported.includes(entityID)} onChange={(event) => {\n              // @ts-expect-error\n              const isChecked = event.target.checked;\n              if (isChecked) {\n                updateProp('supported', [...buttonProps.supported, entityID])\n              } else {\n                updateProp('supported', buttonProps.supported.filter((id) => entityID !== id))\n              }\n            }} />\n            <Label htmlFor={entityName} check>\n              <img src={logo} alt={entityName} height={20} />\n            </Label>\n          </div>\n          )}\n        </FormGroup>\n      </fieldset>\n    </Row>\n  </>\n}","import React from 'react';\n\nexport const EventsTable = ({ events }: { events: { type: string, name: string, arg?: string }[] }) => {\n  return <div className=\"tableFixHead\">\n    <table className=\"table table-hover\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Type</th>\n          <th scope=\"col\">Event</th>\n          <th scope=\"col\">Arg</th>\n        </tr>\n      </thead>\n      <tbody>\n        {events.map(({ type, name, arg }, i) => <tr key={name + i}>\n          <th scope=\"row\">{events.length - i}</th>\n          <td>{type}</td>\n          <td>{name}</td>\n          <td>{arg || ''}</td>\n        </tr>)}\n\n      </tbody>\n    </table>\n  </div>\n}","import React from 'react';\nimport { Icon } from 'design-react-kit';\nimport { getParameters } from 'codesandbox/lib/api/define';\nconst templateIndex = `import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);`\n\nfunction generateURLParams(code: string){\n  const manifest = {\n    \"name\": \"spid-react-button-example\",\n    \"version\": \"1.0.0\",\n    \"description\": \"SPID React button example starter project\",\n    \"keywords\": [\"react\", \"starter\", \"spid\", \"spid-button\"],\n    \"main\": \"src/index.js\",\n    \"dependencies\": {\n      \"react\": \"17.0.2\",\n      \"react-dom\": \"17.0.2\",\n      \"react-scripts\": \"4.0.0\",\n      \"@dej611/spid-react-button\": \"latest\",\n      \"typeface-titillium-web\": \"latest\"\n    },\n    \"devDependencies\": {\n      \"@babel/runtime\": \"7.13.8\",\n      \"typescript\": \"4.1.3\"\n    },\n    \"scripts\": {\n      \"start\": \"react-scripts start\",\n      \"build\": \"react-scripts build\",\n      \"test\": \"react-scripts test --env=jsdom\",\n      \"eject\": \"react-scripts eject\"\n    },\n    \"browserslist\": [\">0.2%\", \"not dead\", \"not ie <= 11\", \"not op_mini all\"]\n  };\n    return getParameters({\n    files: {\n        // @ts-expect-error\n      'App.js': {\n        content: code,\n      },\n      // @ts-expect-error\n      'index.js': {\n        content: templateIndex\n      },\n      'package.json': {\n        // @ts-expect-error\n        content: manifest\n      },\n    },\n  });\n}\n\n  export const CodeSandboxLink = ({code}: {code: string}) => {\n      return <a target=\"_blank noreferral\" href={`https://codesandbox.io/api/v1/sandboxes/define?parameters=${generateURLParams(code)}`} className=\"float-right\"><Icon icon=\"it-software\"/> Open it Codesandbox</a>\n  }","import React from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx';\nimport {vs} from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { CodeSandboxLink } from './Codesandbox';\n\nimport {initState, NoFunctionProps} from './constants';\n\nSyntaxHighlighter.registerLanguage('jsx', jsx);\n\nfunction isDefaultProp(prop: string, value: unknown){\n    if(prop === 'url'){\n        return false;\n    }\n    if(Array.isArray(value)){\n        return value.length === initState[prop].length && \n                initState[prop].every( (v: unknown, i: number) => v === value[i]);\n    }\n    return initState[prop] === value;\n}\n\nexport const CodeRenderer = (buttonProps: NoFunctionProps) => {\n    const entries = Object.entries(buttonProps);\n    const code = `\nimport { SPIDReactButton } from '@dej611/spid-react-button';\nimport 'typeface-titillium-web';\nimport '@dej611/spid-react-button/dist/index.css';\n\nfunction mySPIDButton(props){\n    return (\n        <SPIDReactButton \n            ${entries\n                .filter(([prop, value]) => !isDefaultProp(prop, value))\n                .map(([prop, value]) => `${prop}={${JSON.stringify(value, null, 2)}}`)\n                .join('\\n            ')}\n        />\n    );\n}`;\n\nreturn  <div><SyntaxHighlighter language=\"javascript\" showLineNumbers\n\nwrapLines style={vs}>\n    {code}\n    </SyntaxHighlighter>\n    <CodeSandboxLink code={code}/>\n    </div>\n}","import React, { useEffect , useState} from 'react';\nimport Markdown from 'markdown-to-jsx';\n// @ts-expect-error\nimport {Puff} from 'svg-loaders-react';\nimport { CodeRenderer } from './CodeRenderer';\nimport { NoFunctionProps } from './constants';\n\n\nconst docURL = process.env.PUBLIC_URL + \"/doc.md\";\n\nconst possibleStates = {\n    'init': {state: 'init'},\n    'loaded': {state: 'loaded', payload: '' as string},\n    'error': {state: 'error'}\n} as const;\n\ntype LoadingStates = keyof typeof possibleStates;\ntype StatesValues = (typeof possibleStates)[LoadingStates]\n\nconst wait = (ms: number) => new Promise(r => setTimeout(r, ms))\n\nexport const DocTable = (buttonProps: NoFunctionProps) => {\n    const [doc, setDoc] = useState<StatesValues>(possibleStates.init);\n\n    useEffect(() => {\n        Promise.all([\n            fetch(docURL)\n                .then((response) => response.text()),\n                wait(1500)\n        ])\n            .then(([markdown]) => setDoc({\n                ...possibleStates.loaded, payload: markdown\n            }))\n            .catch(() => setDoc(possibleStates.error))\n    }, [setDoc]);\n\n    return <div>\n        <h1>Reference API</h1>\n        <CodeRenderer {...buttonProps} url={buttonProps.url} />\n        {doc.state === 'init' && <Puff stroke=\"#0073e6\" strokeOpacity=\".5\"/>}\n        {\n            doc.state === 'loaded' \n                ? <Markdown>{doc.payload}</Markdown>\n                : null\n        }\n        {doc.state === 'error' && <p>\n            An error occurred when loading the documentation from the server\n            </p>}\n    </div>\n}","import React, { useState, useCallback } from 'react'\n\nimport { SPIDReactButton, SPIDButtonProps, ProviderRecord } from '@dej611/spid-react-button'\nimport 'bootstrap-italia/dist/css/bootstrap-italia.min.css';\nimport 'typeface-titillium-web';\nimport 'typeface-roboto-mono';\nimport 'typeface-lora';\n\n\nimport '@dej611/spid-react-button/dist/index.css';\n\n// @ts-expect-error\nimport { Col, Row, Container } from 'design-react-kit';\n\nimport { AppHeader } from './Header';\nimport { defaultURL, initState } from './constants';\nimport { Configurator } from './Configurator';\nimport { EventsTable } from './EventsTable';\nimport { DocTable } from './DocTable';\n\nconst App = () => {\n  const [buttonProps, setProps] = useState(initState);\n\n  const [isValidURL, setValidURL] = useState(true);\n  const [events, setEvents] = useState<{ type: string, name: string, arg?: string }[]>([]);\n\n  const updateStateProp = useCallback(\n    <T extends keyof SPIDButtonProps>(prop: T, newValue: SPIDButtonProps[T]) => {\n      return setProps(prevState => ({ ...prevState, [prop]: newValue }))\n    }, [setProps]);\n\n  const prependEvent = useCallback((newEvent) => {\n    setEvents((events) => [newEvent, ...events]);\n  }, [setEvents])\n\n  return <>\n    <AppHeader />\n    <section id=\"main\">\n      <Container tag=\"div\">\n        <Row>\n          <Col md=\"6\">\n            <Row>\n              <Col>\n                <legend>{(buttonProps.type).toUpperCase()} version</legend>\n                <SPIDReactButton\n                  {...buttonProps}\n                  url={isValidURL ? buttonProps.url : defaultURL}\n                  onProvidersShown={() => prependEvent({ type: buttonProps.type, name: 'onProvidersShown' })}\n                  onProvidersHidden={() => prependEvent({ type: buttonProps.type, name: 'onProvidersHidden' })}\n                  onProviderClicked={(arg: ProviderRecord, url: string | undefined, e) => {\n                    e.preventDefault();\n                    prependEvent({ type: buttonProps.type, name: 'onProvidersClicked', arg: JSON.stringify({url, arg}, null, 2) })\n                  }}\n                />\n                <EventsTable events={events} />\n              </Col>\n            </Row>\n          </Col>\n          <Col>\n            <Configurator updateProp={updateStateProp} setValidURL={setValidURL} isValidURL={isValidURL} buttonProps={buttonProps} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Row><h1>F.A.Q.</h1></Row>\n            <Row>\n              <p><strong>7 kb (gzipped) is too much for my project! Is it possible to treeshake it?</strong></p>\n            </Row>\n            <Row>\n              <p>Yes. If you know already you're going to use only one type of button, you can just pick it: just import <code>SPIDReactButtonModal</code> or <code>SPIDReactButtonDropdown</code> and experice full treeshake.</p>\n            </Row>\n            <Row>\n              <p><strong>Is this project official?</strong></p>\n            </Row>\n            <Row>\n              <p>No, this is not an official project.</p>\n            </Row>\n            <Row>\n              <p><strong>Is the providers list official?</strong></p>\n            </Row>\n            <Row>\n              <p>No, as this is not an official project, the list may not be super up-to-date (we check pretty often tho). This official list of SPID provideers is avilable <a href=\"https://github.com/italia/spid-sp-access-button\" target=\"_blank noreferrer\">here</a></p>\n            </Row>\n            <Row>\n              <p><strong>Where the modal version comes from? Is that official?</strong></p>\n            </Row>\n            <Row>\n              <p>The modal version of this component comes from these other project <a href=\"https://github.com/italia/spid-smart-button\" target=\"_blank noreferrer\">spid-smart-button</a></p>\n            </Row>\n            <Row>\n              <p><strong>Does this component goes in conflict with the <code>design-react-kit</code>?</strong></p>\n            </Row>\n            <Row>\n              <p>No. This page was in fact built using components from the <code>design-react-kit</code>. If you find any conflicting issue with it, please report it to this repository.</p>\n            </Row>\n            <Row>\n              <p><strong>Why did you write all of this in English rather than Italian?</strong></p>\n            </Row>\n            <Row>\n              <p>I guess I've started it in English and just finished it. As open source project PR aree very welcome, expecially for translations!</p>\n            </Row>\n            <Row>\n              <p><strong>Does the project have Typescript types?</strong></p>\n            </Row>\n            <Row>\n              <p>Yes, they are in the package. The API documentation is automatically extracted from types.</p>\n            </Row>\n            <Row>\n              <p><strong>Can I contribute somehow to the project?</strong></p>\n            </Row>\n            <Row>\n              <p>Of course you can, glad you've asked. You can report bugs or issues with the project to start with at this repository, or even enhance it with a PR!</p>\n            </Row>\n            <Row>\n              <p><strong>What's the license of this project?</strong></p>\n            </Row>\n            <Row>\n              <p>EUPL 1.2, European Union Public Licence V. 1.2</p>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n    <section id=\"api\">\n      <Container>\n        <Row>\n          <Col>\n            <DocTable {...buttonProps} url={isValidURL ? buttonProps.url : defaultURL} />\n          </Col>\n        </Row>\n      </Container>\n    </section>\n    <footer className=\"it-footer\">\n\n      <div className=\"it-footer-main\">\n        <Container tag=\"div\">\n          <h5>Note</h5>\n          <p>All logos of each Identity Provider is a registered trademark of their respective owners</p>\n          <p>The SPID logo is a registered trademark of AGID, Agenzia per l'Italia Digitale della Presidenza del Consiglio dei Ministri</p>\n        </Container></div>\n      <div className=\"it-footer-small-prints clearfix\">\n        <Container tag=\"div\">\n\n        </Container>\n      </div>\n    </footer>\n  </>\n}\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/spid-ico-circle-lb~LegQefra.27197b71.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-ico-circle-bb~bpKzRdOW.742f2939.svg\";"],"sourceRoot":""}